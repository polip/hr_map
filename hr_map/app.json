[{"name":"app.R","content":"library(shiny)\r\nlibrary(leaflet)\r\nlibrary(sf)\r\nlibrary(dplyr)\r\nlibrary(bslib)\r\nlibrary(RColorBrewer)\r\nlibrary(shinyjs)\r\n\r\n# Load Croatia's administrative boundaries directly from local files\r\n# This assumes the data files are available in the app directory\r\nload_croatia_data <- function() {\r\n  # Load LAU (Local Administrative Units) data\r\n\r\n  lau_data <- st_read('gradovi_gisco.geojson')\r\n  \r\n  return(lau_data)\r\n}\r\n\r\n# Load the data\r\ncroatia_lau_data <- load_croatia_data()\r\n\r\n# Create a function to make a map\r\ncreate_map <- function(sf_data, color_var, transform = FALSE, palette_choice = \"viridis\") {\r\n  # Determine label column (assuming \"NAME\" is common in both datasets)\r\n  label_col <- if(\"NAME\" %in% names(sf_data)) \"NAME\" else \r\n    if(any(grepl(\"NAME\", names(sf_data)))) grep(\"NAME\", names(sf_data), value = TRUE)[1] else\r\n      names(sf_data)[1]\r\n  \r\n  # Define available color palettes\r\n  palettes <- list(\r\n    viridis = \"viridis\",\r\n    magma = \"magma\",\r\n    plasma = \"plasma\",\r\n    inferno = \"inferno\",\r\n    blues = colorRampPalette(c(\"#F7FBFF\", \"#DEEBF7\", \"#C6DBEF\", \"#9ECAE1\", \"#6BAED6\", \"#4292C6\", \"#2171B5\", \"#08519C\", \"#08306B\"))(100),\r\n    greens = colorRampPalette(c(\"#F7FCF5\", \"#E5F5E0\", \"#C7E9C0\", \"#A1D99B\", \"#74C476\", \"#41AB5D\", \"#238B45\", \"#006D2C\", \"#00441B\"))(100),\r\n    reds = colorRampPalette(c(\"#FFF5F0\", \"#FEE0D2\", \"#FCBBA1\", \"#FC9272\", \"#FB6A4A\", \"#EF3B2C\", \"#CB181D\", \"#A50F15\", \"#67000D\"))(100),\r\n    purples = colorRampPalette(c(\"#FCFBFD\", \"#EFEDF5\", \"#DADAEB\", \"#BCBDDC\", \"#9E9AC8\", \"#807DBA\", \"#6A51A3\", \"#54278F\", \"#3F007D\"))(100),\r\n    oranges = colorRampPalette(c(\"#FFF5EB\", \"#FEE6CE\", \"#FDD0A2\", \"#FDAE6B\", \"#FD8D3C\", \"#F16913\", \"#D94801\", \"#A63603\", \"#7F2704\"))(100),\r\n    YlOrRd = colorRampPalette(brewer.pal(9, \"YlOrRd\"))(100),\r\n    YlGnBu = colorRampPalette(brewer.pal(9, \"YlGnBu\"))(100),\r\n    RdYlGn = colorRampPalette(brewer.pal(11, \"RdYlGn\"))(100),\r\n    PuOr = colorRampPalette(brewer.pal(11, \"PuOr\"))(100)\r\n  )\r\n  \r\n  # Select the palette\r\n  selected_palette <- palettes[[palette_choice]]\r\n  \r\n  # Transform the data if needed (for population)\r\n  if(transform && color_var == \"POP_2021\") {\r\n    # Use log transformation for population\r\n    values_to_plot <- log10(sf_data[[color_var]] + 1) # +1 to avoid log(0)\r\n    \r\n    # Create a color palette based on the transformed variable\r\n    pal <- colorNumeric(\r\n      palette = selected_palette,\r\n      domain = values_to_plot\r\n    )\r\n    \r\n    # Custom labels for the legend that show original values\r\n    legend_values <- pretty(sf_data[[color_var]])\r\n    legend_labels <- as.character(legend_values)\r\n    \r\n    # Create the leaflet map with transformed values\r\n    map <- leaflet(sf_data) %>%\r\n      addProviderTiles(providers$CartoDB.Positron) %>%\r\n      addPolygons(\r\n        fillColor = ~pal(log10(get(color_var) + 1)),\r\n        weight = 1,\r\n        opacity = 1,\r\n        color = \"#666\",\r\n        fillOpacity = 0.7,\r\n        highlight = highlightOptions(\r\n          weight = 3,\r\n          color = \"#000\",\r\n          fillOpacity = 0.9,\r\n          bringToFront = TRUE\r\n        ),\r\n        label = ~paste0(get(label_col), \": \", get(color_var)),\r\n        labelOptions = labelOptions(\r\n          style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\r\n          textsize = \"15px\",\r\n          direction = \"auto\"\r\n        )\r\n      ) %>%\r\n      addLegend(\r\n        position = \"bottomright\",\r\n        colors = colorNumeric(selected_palette, domain = log10(legend_values + 1))(log10(legend_values + 1)),\r\n        labels = legend_labels,\r\n        title = \"Population (2021)<br><small>Log scale<\/small>\",\r\n        opacity = 0.7\r\n      ) %>%\r\n      setView(lng = 16.4, lat = 44.5, zoom = 7) # Set view to approximately center Croatia\r\n  } else {\r\n    # Regular palette for non-transformed variables\r\n    pal <- colorNumeric(\r\n      palette = selected_palette,\r\n      domain = sf_data[[color_var]]\r\n    )\r\n    \r\n    # Create the leaflet map without transformation\r\n    map <- leaflet(sf_data) %>%\r\n      addProviderTiles(providers$CartoDB.Positron) %>%\r\n      addPolygons(\r\n        fillColor = ~pal(get(color_var)),\r\n        weight = 1,\r\n        opacity = 1,\r\n        color = \"#666\",\r\n        fillOpacity = 0.7,\r\n        highlight = highlightOptions(\r\n          weight = 3,\r\n          color = \"#000\",\r\n          fillOpacity = 0.9,\r\n          bringToFront = TRUE\r\n        ),\r\n        label = ~paste0(get(label_col), \": \", get(color_var)),\r\n        labelOptions = labelOptions(\r\n          style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\r\n          textsize = \"15px\",\r\n          direction = \"auto\"\r\n        )\r\n      ) %>%\r\n      addLegend(\r\n        position = \"bottomright\",\r\n        pal = pal,\r\n        values = ~get(color_var),\r\n        title = color_var,\r\n        opacity = 0.7\r\n      ) %>%\r\n      setView(lng = 16.4, lat = 44.5, zoom = 7) # Set view to approximately center Croatia\r\n  }\r\n  \r\n  return(map)\r\n}\r\n\r\n# Define available variables for coloring (focus on the specified variables)\r\navailable_vars <- c(\r\n  \"Population (2021)\" = \"POP_2021\",\r\n  \"Area (kmÂ²)\" = \"AREA_KM2\"\r\n)\r\n\r\n# UI\r\nui <- page_fluid(\r\n  title = \"Croatia Administrative Maps\",\r\n  useShinyjs(),  # Enable shinyjs\r\n  card(\r\n    card_header(\r\n      h1(\"Croatia Administrative Map\", class = \"text-center\")\r\n    ),\r\n    card_body(\r\n      page_sidebar(\r\n        sidebar = sidebar(\r\n          width = 300,\r\n          h4(\"Map Controls\"),\r\n          selectInput(\r\n            \"lau_color_var\", \r\n            \"Color by Variable:\", \r\n            choices = available_vars, \r\n            selected = \"POP_2021\"\r\n          ),\r\n          # Add color palette selector\r\n          selectInput(\r\n            \"color_palette\",\r\n            \"Color Palette:\",\r\n            choices = list(\r\n              \"Sequential (Blue to Purple)\" = \"viridis\",\r\n              \"Sequential (Purple to Yellow)\" = \"magma\",\r\n              \"Sequential (Green to Purple)\" = \"plasma\",\r\n              \"Sequential (Black to Yellow)\" = \"inferno\",\r\n              \"Blues (Light to Dark)\" = \"blues\",\r\n              \"Greens (Light to Dark)\" = \"greens\",\r\n              \"Reds (Light to Dark)\" = \"reds\",\r\n              \"Purples (Light to Dark)\" = \"purples\",\r\n              \"Oranges (Light to Dark)\" = \"oranges\",\r\n              \"Yellow-Orange-Red\" = \"YlOrRd\",\r\n              \"Yellow-Green-Blue\" = \"YlGnBu\",\r\n              \"Red-Yellow-Green\" = \"RdYlGn\",\r\n              \"Purple-Orange\" = \"PuOr\"\r\n            ),\r\n            selected = \"viridis\"\r\n          ),\r\n          checkboxInput(\r\n            \"transform_data\",\r\n            \"Transform Population Data (Log Scale)\",\r\n            value = TRUE\r\n          ),\r\n          hr(),\r\n          p(\"This map shows Local Administrative Units (LAU) in Croatia, representing municipalities and cities.\"),\r\n          conditionalPanel(\r\n            condition = \"input.lau_color_var == 'POP_2021' && input.transform_data == true\",\r\n            p(\"Population data is log-transformed to better visualize differences between municipalities.\", \r\n              style = \"font-style: italic; color: #666;\")\r\n          )\r\n        ),\r\n        leafletOutput(\"lau_map\", height = \"600px\")\r\n      )\r\n    ),\r\n    card_footer(\r\n      p(\"Population data: 2021 Census\", class = \"text-center\")\r\n    )\r\n  )\r\n)\r\n\r\n# Server\r\nserver <- function(input, output, session) {\r\n  # Render LAU map\r\n  output$lau_map <- renderLeaflet({\r\n    req(input$lau_color_var)\r\n    create_map(\r\n      croatia_lau_data, \r\n      input$lau_color_var, \r\n      transform = input$transform_data,\r\n      palette_choice = input$color_palette\r\n    )\r\n  })\r\n  \r\n  # Hide transform checkbox when not showing population\r\n  observe({\r\n    if(input$lau_color_var != \"POP_2021\") {\r\n      updateCheckboxInput(session, \"transform_data\", value = FALSE)\r\n      shinyjs::hide(\"transform_data\")\r\n    } else {\r\n      shinyjs::show(\"transform_data\")\r\n    }\r\n  })\r\n}\r\n\r\nshinylive::export(destdir = 'hr_map',appdir = 'app') \r\n\r\n# Run the app\r\nshinyApp(ui = ui, server = server)","type":"text"}]
